<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Clients\Appointment;
use App\Models\Clients\Product;
use App\Models\Clients\Sale;
use App\Models\Clients\SaleItem;
use App\Models\Clients\Warehouse;
use Illuminate\Support\Facades\DB;

class RandomSalesSeeder extends Seeder
{
    public function run()
    {
        $projectId = 45; // ID –ø—Ä–æ–µ–∫—Ç–∞
        $targetSalesCount = 1300; // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –®–¢–£–ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        $yearStart = 2024; // –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
        $yearEnd = 2025; // –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥

        echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {$projectId}\n";
        echo "üì¶ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –®–¢–£–ö –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {$targetSalesCount}\n";
        echo "üìÖ –ü–µ—Ä–∏–æ–¥: {$yearStart}-{$yearEnd}\n";

        try {
            DB::beginTransaction();

            // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ 2024-2025
            $appointments = Appointment::where('project_id', $projectId)
                ->where(function($query) use ($yearStart, $yearEnd) {
                    $query->whereYear('date', $yearStart)
                          ->orWhereYear('date', $yearEnd);
                })
                ->get();

            if ($appointments->isEmpty()) {
                echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {$yearStart}-{$yearEnd} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {$projectId}\n";
                return;
            }

            echo "üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " . $appointments->count() . "\n";

            // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞ (–≥–¥–µ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {$projectId}...\n";
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ
            $totalWarehouse = Warehouse::where('project_id', $projectId)->count();
            echo "üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ: {$totalWarehouse}\n";
            
            $warehouseWithQuantity = Warehouse::where('project_id', $projectId)
                ->where('quantity', '>', 0)
                ->count();
            echo "üìà –ó–∞–ø–∏—Å–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º > 0: {$warehouseWithQuantity}\n";

            $warehouseItems = Warehouse::where('project_id', $projectId)
                ->where('quantity', '>', 0)
                ->with('product')
                ->get();

            echo "üè™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å–∫–ª–∞–¥–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: " . $warehouseItems->count() . "\n";

            $products = $warehouseItems->map(function($warehouseItem) {
                $product = $warehouseItem->product;
                if ($product) {
                    $product->warehouse = $warehouseItem; // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É
                    return $product;
                } else {
                    echo "‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∫–ª–∞–¥–∞ ID: {$warehouseItem->id}, product_id: {$warehouseItem->product_id}\n";
                    return null;
                }
            })->filter(function($product) {
                return $product !== null; // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
            });

            echo "‚úÖ –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: " . $products->count() . "\n";

            if ($products->isEmpty()) {
                echo "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {$projectId}\n";
                return;
            }

            // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ
            $totalQuantityAvailable = $products->sum(function($product) {
                return $product->warehouse->quantity;
            });

            echo "üè™ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: " . $products->count() . " –≤–∏–¥–æ–≤\n";
            echo "üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫: {$totalQuantityAvailable}\n";

            if ($totalQuantityAvailable < $targetSalesCount) {
                echo "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à—Ç—É–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {$totalQuantityAvailable}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {$targetSalesCount}\n";
                return;
            }

            echo "‚úÖ –¢–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {$targetSalesCount} —à—Ç—É–∫\n";

            // 4. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            $shuffledAppointments = $appointments->shuffle();

            // 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø–∏—Å—è–º
            $soldQuantity = 0; // –°–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–æ–¥–∞–ª–∏ —à—Ç—É–∫
            $salesCount = 0;
            $itemsCount = 0;

            foreach ($shuffledAppointments as $appointment) {
                // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if ($soldQuantity >= $targetSalesCount) {
                    break;
                }

                // –ù–µ –≤–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã (40% –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–∞—Ç —Ç–æ–≤–∞—Ä—ã)  
                if (rand(1, 100) > 40) {
                    continue;
                }

                // –†–∞–Ω–¥–æ–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–ø–∏—Å–∏ (1-3)
                $itemsInAppointment = rand(1, 3);
                
                $appointmentItems = [];
                $remainingToSell = $targetSalesCount - $soldQuantity;
                
                for ($i = 0; $i < $itemsInAppointment && $remainingToSell > 0; $i++) {
                    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                    $product = $products->random();

                    // –†–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (1-5 —à—Ç—É–∫, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ —á–µ–º –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å)
                    $maxQuantity = min($product->warehouse->quantity, 5, $remainingToSell);
                    if ($maxQuantity < 1) continue;
                    
                    $quantity = rand(1, $maxQuantity);
                    $remainingToSell -= $quantity;

                    $appointmentItems[] = [
                        'product' => $product,
                        'quantity' => $quantity,
                        'retail_price' => $product->warehouse->retail_price ?: rand(50, 300),
                        'wholesale_price' => $product->warehouse->purchase_price ?: rand(20, 150),
                    ];
                }

                if (empty($appointmentItems)) continue;

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                $sale = Sale::create([
                    'appointment_id' => $appointment->id,
                    'client_id' => $appointment->client_id,
                    'employee_id' => $appointment->user_id,
                    'date' => $appointment->date,
                    'total_amount' => 0,
                    'project_id' => $projectId,
                    'notes' => '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞'
                ]);

                $totalAmount = 0;

                foreach ($appointmentItems as $item) {
                    $product = $item['product'];
                    $quantity = $item['quantity'];
                    $retailPrice = $item['retail_price'];
                    $wholesalePrice = $item['wholesale_price'];
                    $itemTotal = $retailPrice * $quantity;

                    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
                    SaleItem::create([
                        'sale_id' => $sale->id,
                        'product_id' => $product->id,
                        'quantity' => $quantity,
                        'retail_price' => $retailPrice,
                        'wholesale_price' => $wholesalePrice,
                        'total' => $itemTotal,
                        'project_id' => $projectId,
                    ]);

                    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ –º–æ–¥–µ–ª–∏
                    Warehouse::decreaseQuantity($product->id, $quantity, $projectId);

                    $totalAmount += $itemTotal;
                    $itemsCount++;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏
                $sale->update(['total_amount' => $totalAmount]);
                $salesCount++;

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –æ–±—â–µ–º—É –ø—Ä–æ–¥–∞–Ω–Ω–æ–º—É
                $appointmentSoldQuantity = array_sum(array_column($appointmentItems, 'quantity'));
                $soldQuantity += $appointmentSoldQuantity;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ø—Ä–æ–¥–∞–∂
                if ($salesCount % 50 === 0) {
                    echo "‚è≥ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {$salesCount}, –ø—Ä–æ–¥–∞–Ω–æ —à—Ç—É–∫: {$soldQuantity}/{$targetSalesCount}\n";
                }
            }

            DB::commit();

            echo "\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n";
            echo "üìä –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {$salesCount}\n";
            echo "üì¶ –ü—Ä–æ–¥–∞–Ω–æ —à—Ç—É–∫ —Ç–æ–≤–∞—Ä–æ–≤: {$soldQuantity} –∏–∑ —Ü–µ–ª–∏ {$targetSalesCount}\n";
            echo "üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø—Ä–æ–¥–∞–∂–∏: {$itemsCount}\n";
            echo "üè™ –¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∞–Ω—ã —Å–æ —Å–∫–ª–∞–¥–∞\n";
            echo "üí∞ –ü—Ä–æ–¥–∞–∂–∏ —Å–≤—è–∑–∞–Ω—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n";

        } catch (\Exception $e) {
            DB::rollBack();
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂: " . $e->getMessage() . "\n";
            echo $e->getTraceAsString() . "\n";
        }
    }
} 