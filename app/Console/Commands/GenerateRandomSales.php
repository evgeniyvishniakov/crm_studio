<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Clients\Appointment;
use App\Models\Clients\Product;
use App\Models\Clients\Sale;
use App\Models\Clients\SaleItem;
use App\Models\Clients\Warehouse;
use Illuminate\Support\Facades\DB;

class GenerateRandomSales extends Command
{
    protected $signature = 'sales:generate-random 
                          {--project_id=1 : ID –ø—Ä–æ–µ–∫—Ç–∞} 
                          {--products=1300 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è}
                          {--year=2024 : –ì–æ–¥ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂}';
    
    protected $description = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥';

    public function handle()
    {
        $projectId = $this->option('project_id');
        $productsCount = $this->option('products');
        $year = $this->option('year');

        $this->info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {$projectId}");
        $this->info("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {$productsCount}");
        $this->info("–ì–æ–¥: {$year}");

        try {
            DB::beginTransaction();

            // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –≥–æ–¥
            $appointments = Appointment::where('project_id', $projectId)
                ->whereYear('date', $year)
                ->get();

            if ($appointments->isEmpty()) {
                $this->error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∑–∞ {$year} –≥–æ–¥ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {$projectId}");
                return;
            }

            $this->info("–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " . $appointments->count());

            // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞ (–≥–¥–µ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            $products = Product::where('project_id', $projectId)
                ->whereHas('warehouse', function($query) {
                    $query->where('quantity', '>', 0);
                })
                ->with('warehouse')
                ->get();

            if ($products->count() < $productsCount) {
                $this->error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: " . $products->count() . ", —Ç—Ä–µ–±—É–µ—Ç—Å—è: {$productsCount}");
                return;
            }

            $this->info("–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: " . $products->count());

            // 3. –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            $selectedProducts = $products->random($productsCount);
            $this->info("–í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: " . $selectedProducts->count());

            // 4. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            $shuffledAppointments = $appointments->shuffle();

            // 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø–∏—Å—è–º
            $productIndex = 0;
            $salesCount = 0;
            $itemsCount = 0;

            foreach ($shuffledAppointments as $appointment) {
                // –ù–µ –≤–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã (30-50% –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–∞—Ç —Ç–æ–≤–∞—Ä—ã)
                if (rand(1, 100) > 40) {
                    continue;
                }

                // –†–∞–Ω–¥–æ–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–ø–∏—Å–∏ (1-2)
                $itemsInAppointment = rand(1, 2);
                
                $appointmentItems = [];
                
                for ($i = 0; $i < $itemsInAppointment && $productIndex < $selectedProducts->count(); $i++) {
                    $product = $selectedProducts[$productIndex];
                    $productIndex++;

                    // –†–∞–Ω–¥–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (1-3 —à—Ç—É–∫–∏)
                    $maxQuantity = min($product->warehouse->quantity, 3);
                    if ($maxQuantity < 1) continue;
                    
                    $quantity = rand(1, $maxQuantity);

                    $appointmentItems[] = [
                        'product' => $product,
                        'quantity' => $quantity,
                        'retail_price' => $product->warehouse->retail_price ?: 100,
                        'wholesale_price' => $product->warehouse->purchase_price ?: 50,
                    ];
                }

                if (empty($appointmentItems)) continue;

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                $sale = Sale::create([
                    'appointment_id' => $appointment->id,
                    'client_id' => $appointment->client_id,
                    'employee_id' => $appointment->user_id,
                    'date' => $appointment->date,
                    'total_amount' => 0,
                    'project_id' => $projectId,
                    'notes' => '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                ]);

                $totalAmount = 0;

                foreach ($appointmentItems as $item) {
                    $product = $item['product'];
                    $quantity = $item['quantity'];
                    $retailPrice = $item['retail_price'];
                    $wholesalePrice = $item['wholesale_price'];
                    $itemTotal = $retailPrice * $quantity;

                    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
                    SaleItem::create([
                        'sale_id' => $sale->id,
                        'product_id' => $product->id,
                        'quantity' => $quantity,
                        'retail_price' => $retailPrice,
                        'wholesale_price' => $wholesalePrice,
                        'total' => $itemTotal,
                        'project_id' => $projectId,
                    ]);

                    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                    Warehouse::where('product_id', $product->id)
                        ->where('project_id', $projectId)
                        ->decrement('quantity', $quantity);

                    $totalAmount += $itemTotal;
                    $itemsCount++;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏
                $sale->update(['total_amount' => $totalAmount]);
                $salesCount++;

                if ($productIndex >= $selectedProducts->count()) {
                    break;
                }
            }

            DB::commit();

            $this->info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
            $this->info("üìä –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {$salesCount}");
            $this->info("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {$itemsCount}");
            $this->info("üè™ –¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–∞–Ω—ã —Å–æ —Å–∫–ª–∞–¥–∞");

        } catch (\Exception $e) {
            DB::rollBack();
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂: " . $e->getMessage());
            $this->error($e->getTraceAsString());
        }
    }
} 