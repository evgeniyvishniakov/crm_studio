<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Plan;
use App\Models\Currency;
use Illuminate\Support\Facades\DB;

class TestCurrencySystem extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:currency-system';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–∞–Ω—ã
        $plans = Plan::all();
        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {$plans->count()}");
        
        if ($plans->count() > 0) {
            $plan = $plans->first();
            $this->info("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω: {$plan->name}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
            $languages = ['ua', 'ru', 'en', 'pl'];
            
            foreach ($languages as $lang) {
                $currency = $plan->getCurrencyByLanguage($lang);
                $monthlyPrice = $plan->getPriceForLanguage($lang, 'monthly');
                $this->info("  üåç {$lang} ‚Üí {$currency}: {$monthlyPrice}");
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–ª—é—Ç—ã
        $currencies = Currency::all();
        $this->info("üí∞ –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç: {$currencies->count()}");
        
        foreach ($currencies as $currency) {
            $this->info("  üí± {$currency->code} ({$currency->name}) - {$currency->symbol}");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤–∞–ª—é—Ç –≤ –ø–ª–∞–Ω–∞—Ö
        if ($plans->count() > 0) {
            $plan = $plans->first();
            $this->info("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤–∞–ª—é—Ç –≤ –ø–ª–∞–Ω–µ:");
            
            $currencyFields = [
                'price_monthly_uah', 'price_monthly_usd', 'price_monthly_pln',
                'price_quarterly_uah', 'price_quarterly_usd', 'price_quarterly_pln'
            ];
            
            foreach ($currencyFields as $field) {
                $value = $plan->$field ?? 'null';
                $this->info("  üìù {$field}: {$value}");
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞–Ω–æ–≤
        $this->info("\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã plans:");
        try {
            $columns = DB::select('SHOW COLUMNS FROM plans');
            foreach ($columns as $col) {
                if (strpos($col->Field, 'price_') !== false) {
                    $this->info("  üìä {$col->Field} - {$col->Type}");
                }
            }
        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: " . $e->getMessage());
        }
        
        $this->info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    }
}
