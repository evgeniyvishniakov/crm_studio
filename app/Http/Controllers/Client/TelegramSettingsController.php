<?php

declare(strict_types=1);

namespace App\Http\Controllers\Client;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Admin\Project;
use App\Services\TelegramService;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class TelegramSettingsController extends Controller
{
    private TelegramService $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
     */
    public function index()
    {
        $user = Auth::user();
        $project = Project::find($user->project_id);

        return view('client.telegram-settings.index', compact('project'));
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
     */
    public function update(Request $request)
    {
        $user = Auth::user();
        $project = Project::find($user->project_id);

        $validated = $request->validate([
            'telegram_bot_token' => 'nullable|string|max:255',
            'telegram_chat_id' => 'nullable|string|max:255',
            'telegram_notifications_enabled' => 'boolean',
        ]);

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ chat_id
        if ($validated['telegram_notifications_enabled'] ?? false) {
            if (empty($validated['telegram_bot_token'])) {
                if ($request->ajax() || $request->wantsJson()) {
                    return response()->json([
                        'success' => false,
                        'errors' => ['telegram_bot_token' => [__('messages.telegram_bot_token_required')]]
                    ], 422);
                }
                return back()->withErrors(['telegram_bot_token' => __('messages.telegram_bot_token_required')]);
            }
            if (empty($validated['telegram_chat_id'])) {
                if ($request->ajax() || $request->wantsJson()) {
                    return response()->json([
                        'success' => false,
                        'errors' => ['telegram_chat_id' => [__('messages.telegram_chat_id_required')]]
                    ], 422);
                }
                return back()->withErrors(['telegram_chat_id' => __('messages.telegram_chat_id_required')]);
            }
        }

        $project->update($validated);

        if ($request->ajax() || $request->wantsJson()) {
            return response()->json([
                'success' => true,
                'message' => __('messages.telegram_settings_saved')
            ]);
        }

        return back()->with('success', __('messages.telegram_settings_saved'));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
     */
    public function testConnection(Request $request)
    {
        $user = Auth::user();
        $project = Project::find($user->project_id);

        if (!$project->telegram_bot_token || !$project->telegram_chat_id) {
            return response()->json([
                'success' => false,
                'message' => '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            ]);
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        config(['services.telegram.bot_token' => $project->telegram_bot_token ?? '']);
        config(['services.telegram.chat_id' => $project->telegram_chat_id ?? '']);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        $botInfo = $this->telegramService->getBotInfo();
        
        if (!$botInfo) {
            return response()->json([
                'success' => false,
                'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.'
            ]);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $testMessage = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n";
        $testMessage .= "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n";
        $testMessage .= "ü§ñ <b>–ë–æ—Ç:</b> @{$botInfo['username']}\n";
        $testMessage .= "üè¢ <b>–°–∞–ª–æ–Ω:</b> {$project->project_name}\n";
        $testMessage .= "üìÖ <b>–î–∞—Ç–∞:</b> " . now()->format('d.m.Y H:i:s');

        $sent = $this->telegramService->sendMessage($testMessage);

        if ($sent) {
            return response()->json([
                'success' => true,
                'message' => '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!',
                'bot_info' => $botInfo
            ]);
        } else {
            return response()->json([
                'success' => false,
                'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —á–∞—Ç–∞.'
            ]);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
     */
    public function getInstructions()
    {
        return response()->json([
            'instructions' => [
                'step1' => '1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot',
                'step2' => '2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather',
                'step3' => '3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª',
                'step4' => '4. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞:',
                'step5' => '   - –î–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://api.telegram.org/bot<TOKEN>/getUpdates',
                'step6' => '   - –î–ª—è –≥—Ä—É–ø–ø—ã: –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                'step7' => '   - –î–ª—è –∫–∞–Ω–∞–ª–∞: –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                'step8' => '5. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                'step9' => '6. –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'
            ]
        ]);
    }
}
